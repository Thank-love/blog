(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{386:function(t,e,o){"use strict";o.r(e);var s=o(44),v=Object(s.a)({},(function(){var t=this,e=t.$createElement,o=t._self._c||e;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h1",{attrs:{id:"模块化"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#模块化"}},[t._v("#")]),t._v(" 模块化")]),t._v(" "),o("p",[t._v("es6 的"),o("code",[t._v("Module")]),t._v("使得 JavaScript 具有自己的模块体系。和面向对象语言的封装更接近。")]),t._v(" "),o("h2",{attrs:{id:"浏览器模块化"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#浏览器模块化"}},[t._v("#")]),t._v(" 浏览器模块化")]),t._v(" "),o("p",[t._v("es6 的模块化会自动采用严格模式。"),o("code",[t._v("export")]),t._v("导出，"),o("code",[t._v("import")]),t._v("导入。ES2020 提案 引入 "),o("code",[t._v("import()")]),t._v("函数，支持动态加载模块。")]),t._v(" "),o("p",[t._v("和 node.js 的 CommonJS 的区别：")]),t._v(" "),o("ul",[o("li",[t._v("CommonJS 模块输出值的拷贝，es6 模块是值得引用")]),t._v(" "),o("li",[t._v("CommonJS 模块是运行时加载，es6 模块时编译时输出")]),t._v(" "),o("li",[t._v("CommonJS 时同步加载(本地加载，性能影响不大)，es6 是异步加载")])])])}),[],!1,null,null,null);e.default=v.exports}}]);